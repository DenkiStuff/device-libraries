# 1 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
# 34 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
# 1 "../lib/Adafruit_GFX/Adafruit_GFX.h" 1




# 1 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 1
# 23 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h"
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 1 3
# 48 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stddef.h" 1 3 4
# 212 "/opt/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stddef.h" 3 4
typedef unsigned int size_t;
# 49 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 2 3







extern "C" {
# 70 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
typedef struct {
 int quot;
 int rem;
} div_t;


typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef int (*__compar_fn_t)(const void *, const void *);
# 116 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern void abort(void) __attribute__((__noreturn__));




extern int abs(int __i) __attribute__((__const__));
# 130 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern long labs(long __i) __attribute__((__const__));
# 153 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern void *bsearch(const void *__key, const void *__base, size_t __nmemb,
       size_t __size, int (*__compar)(const void *, const void *));







extern div_t div(int __num, int __denom) __asm__("__divmodhi4") __attribute__((__const__));





extern ldiv_t ldiv(long __num, long __denom) __asm__("__divmodsi4") __attribute__((__const__));
# 185 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern void qsort(void *__base, size_t __nmemb, size_t __size,
    __compar_fn_t __compar);
# 218 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern long strtol(const char *__nptr, char **__endptr, int __base);
# 252 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern unsigned long strtoul(const char *__nptr, char **__endptr, int __base);
# 264 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern long atol(const char *__s) __attribute__((__pure__));
# 276 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern int atoi(const char *__s) __attribute__((__pure__));
# 288 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern void exit(int __status) __attribute__((__noreturn__));
# 300 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern void *malloc(size_t __size) __attribute__((__malloc__));






extern void free(void *__ptr);




extern size_t __malloc_margin;




extern char *__malloc_heap_start;




extern char *__malloc_heap_end;






extern void *calloc(size_t __nele, size_t __size) __attribute__((__malloc__));
# 348 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern void *realloc(void *__ptr, size_t __size) __attribute__((__malloc__));

extern double strtod(const char *__nptr, char **__endptr);
# 361 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern double atof(const char *__nptr);
# 383 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern int rand(void);



extern void srand(unsigned int __seed);






extern int rand_r(unsigned long *__ctx);
# 428 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern __inline__ __attribute__((__gnu_inline__))
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
 extern char *__itoa (int, char *, int);
 return __itoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
 *__s = 0;
 return __s;
    } else {
 extern char *__itoa_ncheck (int, char *, unsigned char);
 return __itoa_ncheck (__val, __s, __radix);
    }
}
# 473 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern __inline__ __attribute__((__gnu_inline__))
char *ltoa (long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
 extern char *__ltoa (long, char *, int);
 return __ltoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
 *__s = 0;
 return __s;
    } else {
 extern char *__ltoa_ncheck (long, char *, unsigned char);
 return __ltoa_ncheck (__val, __s, __radix);
    }
}
# 516 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern __inline__ __attribute__((__gnu_inline__))
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
 extern char *__utoa (unsigned int, char *, int);
 return __utoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
 *__s = 0;
 return __s;
    } else {
 extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
 return __utoa_ncheck (__val, __s, __radix);
    }
}
# 558 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern __inline__ __attribute__((__gnu_inline__))
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
 extern char *__ultoa (unsigned long, char *, int);
 return __ultoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
 *__s = 0;
 return __s;
    } else {
 extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
 return __ultoa_ncheck (__val, __s, __radix);
    }
}
# 590 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern long random(void);




extern void srandom(unsigned long __seed);







extern long random_r(unsigned long *__ctx);
# 649 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern char *dtostre(double __val, char *__s, unsigned char __prec,
       unsigned char __flags);
# 666 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern char *dtostrf(double __val, signed char __width,
                     unsigned char __prec, char *__s);
# 685 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdlib.h" 3
extern int atexit(void (*)(void));
extern int system (const char *);
extern char *getenv (const char *);



}
# 24 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stdbool.h" 1 3 4
# 25 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 1 3
# 46 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stddef.h" 1 3 4
# 47 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 2 3
# 58 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern "C" {
# 125 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern int ffs(int __val) __attribute__((__const__));





extern int ffsl(long __val) __attribute__((__const__));





__extension__ extern int ffsll(long long __val) __attribute__((__const__));
# 150 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern void *memccpy(void *, const void *, int, size_t);
# 162 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern void *memchr(const void *, int, size_t) __attribute__((__pure__));
# 180 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern int memcmp(const void *, const void *, size_t) __attribute__((__pure__));
# 191 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern void *memcpy(void *, const void *, size_t);
# 203 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern void *memmem(const void *, size_t, const void *, size_t) __attribute__((__pure__));
# 213 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern void *memmove(void *, const void *, size_t);
# 225 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern void *memrchr(const void *, int, size_t) __attribute__((__pure__));
# 235 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern void *memset(void *, int, size_t);
# 248 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strcat(char *, const char *);
# 262 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strchr(const char *, int) __attribute__((__pure__));
# 274 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strchrnul(const char *, int) __attribute__((__pure__));
# 287 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern int strcmp(const char *, const char *) __attribute__((__pure__));
# 305 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strcpy(char *, const char *);
# 320 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern int strcasecmp(const char *, const char *) __attribute__((__pure__));
# 333 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strcasestr(const char *, const char *) __attribute__((__pure__));
# 344 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern size_t strcspn(const char *__s, const char *__reject) __attribute__((__pure__));
# 364 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strdup(const char *s1);
# 377 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern size_t strlcat(char *, const char *, size_t);
# 388 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern size_t strlcpy(char *, const char *, size_t);
# 399 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern size_t strlen(const char *) __attribute__((__pure__));
# 411 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strlwr(char *);
# 422 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strncat(char *, const char *, size_t);
# 434 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern int strncmp(const char *, const char *, size_t) __attribute__((__pure__));
# 449 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strncpy(char *, const char *, size_t);
# 464 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern int strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));
# 478 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern size_t strnlen(const char *, size_t) __attribute__((__pure__));
# 491 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strpbrk(const char *__s, const char *__accept) __attribute__((__pure__));
# 505 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strrchr(const char *, int) __attribute__((__pure__));
# 515 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strrev(char *);
# 533 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strsep(char **, const char *);
# 544 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern size_t strspn(const char *__s, const char *__accept) __attribute__((__pure__));
# 557 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strstr(const char *, const char *) __attribute__((__pure__));
# 576 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strtok(char *, const char *);
# 593 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strtok_r(char *, const char *, char **);
# 606 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/string.h" 3
extern char *strupr(char *);



extern int strcoll(const char *s1, const char *s2);
extern char *strerror(int errnum);
extern size_t strxfrm(char *dest, const char *src, size_t n);



}
# 26 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 1 3
# 121 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern "C" {





extern double cos(double __x) __attribute__((__const__));





extern double sin(double __x) __attribute__((__const__));





extern double tan(double __x) __attribute__((__const__));






extern double fabs(double __x) __attribute__((__const__));






extern double fmod(double __x, double __y) __attribute__((__const__));
# 168 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern double modf(double __x, double *__iptr);


extern float modff (float __x, float *__iptr);




extern double sqrt(double __x) __attribute__((__const__));


extern float sqrtf (float) __attribute__((__const__));




extern double cbrt(double __x) __attribute__((__const__));
# 195 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern double hypot (double __x, double __y) __attribute__((__const__));







extern double square(double __x) __attribute__((__const__));






extern double floor(double __x) __attribute__((__const__));






extern double ceil(double __x) __attribute__((__const__));
# 235 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern double frexp(double __x, int *__pexp);







extern double ldexp(double __x, int __exp) __attribute__((__const__));





extern double exp(double __x) __attribute__((__const__));





extern double cosh(double __x) __attribute__((__const__));





extern double sinh(double __x) __attribute__((__const__));





extern double tanh(double __x) __attribute__((__const__));







extern double acos(double __x) __attribute__((__const__));







extern double asin(double __x) __attribute__((__const__));






extern double atan(double __x) __attribute__((__const__));
# 299 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern double atan2(double __y, double __x) __attribute__((__const__));





extern double log(double __x) __attribute__((__const__));





extern double log10(double __x) __attribute__((__const__));





extern double pow(double __x, double __y) __attribute__((__const__));






extern int isnan(double __x) __attribute__((__const__));
# 334 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern int isinf(double __x) __attribute__((__const__));






__attribute__((__const__)) static inline int isfinite (double __x)
{
    unsigned char __exp;
    __asm__ (
 "mov	%0, %C1		\n\t"
 "lsl	%0		\n\t"
 "mov	%0, %D1		\n\t"
 "rol	%0		"
 : "=r" (__exp)
 : "r" (__x) );
    return __exp != 0xff;
}






__attribute__((__const__)) static inline double copysign (double __x, double __y)
{
    __asm__ (
 "bst	%D2, 7	\n\t"
 "bld	%D0, 7	"
 : "=r" (__x)
 : "0" (__x), "r" (__y) );
    return __x;
}
# 377 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern int signbit (double __x) __attribute__((__const__));






extern double fdim (double __x, double __y) __attribute__((__const__));
# 393 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern double fma (double __x, double __y, double __z) __attribute__((__const__));







extern double fmax (double __x, double __y) __attribute__((__const__));







extern double fmin (double __x, double __y) __attribute__((__const__));






extern double trunc (double __x) __attribute__((__const__));
# 427 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern double round (double __x) __attribute__((__const__));
# 440 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern long lround (double __x) __attribute__((__const__));
# 454 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/math.h" 3
extern long lrint (double __x) __attribute__((__const__));



}
# 27 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2

# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 1 3
# 88 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/inttypes.h" 1 3
# 37 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/inttypes.h" 3
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stdint.h" 1 3 4
# 9 "/opt/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stdint.h" 3 4
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdint.h" 1 3 4
# 125 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "/opt/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stdint.h" 2 3 4
# 38 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/inttypes.h" 2 3
# 77 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 89 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 2 3
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stddef.h" 1 3 4
# 90 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 2 3
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 1 3
# 99 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 3
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/sfr_defs.h" 1 3
# 100 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 2 3
# 272 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 3
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/iom328p.h" 1 3
# 273 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 2 3
# 627 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 3
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/portpins.h" 1 3
# 628 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 2 3

# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/common.h" 1 3
# 630 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 2 3

# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/version.h" 1 3
# 632 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 2 3






# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/fuse.h" 1 3
# 239 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/fuse.h" 3
typedef struct
{
    unsigned char low;
    unsigned char high;
    unsigned char extended;
} __fuse_t;
# 639 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 2 3


# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/lock.h" 1 3
# 642 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/io.h" 2 3
# 91 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 2 3
# 116 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern "C" {
# 353 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
typedef void prog_void __attribute__((__progmem__,deprecated("prog_void type is deprecated.")));
typedef char prog_char __attribute__((__progmem__,deprecated("prog_char type is deprecated.")));
typedef unsigned char prog_uchar __attribute__((__progmem__,deprecated("prog_uchar type is deprecated.")));
typedef int8_t prog_int8_t __attribute__((__progmem__,deprecated("prog_int8_t type is deprecated.")));
typedef uint8_t prog_uint8_t __attribute__((__progmem__,deprecated("prog_uint8_t type is deprecated.")));
typedef int16_t prog_int16_t __attribute__((__progmem__,deprecated("prog_int16_t type is deprecated.")));
typedef uint16_t prog_uint16_t __attribute__((__progmem__,deprecated("prog_uint16_t type is deprecated.")));
typedef int32_t prog_int32_t __attribute__((__progmem__,deprecated("prog_int32_t type is deprecated.")));
typedef uint32_t prog_uint32_t __attribute__((__progmem__,deprecated("prog_uint32_t type is deprecated.")));

typedef int64_t prog_int64_t __attribute__((__progmem__,deprecated("prog_int64_t type is deprecated.")));
typedef uint64_t prog_uint64_t __attribute__((__progmem__,deprecated("prog_uint64_t type is deprecated.")));
# 1158 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern const void * memchr_P(const void *, int __val, size_t __len) __attribute__((__const__));
# 1172 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int memcmp_P(const void *, const void *, size_t) __attribute__((__pure__));






extern void *memccpy_P(void *, const void *, int __val, size_t);
# 1188 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern void *memcpy_P(void *, const void *, size_t);






extern void *memmem_P(const void *, size_t, const void *, size_t) __attribute__((__pure__));
# 1207 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern const void * memrchr_P(const void *, int __val, size_t __len) __attribute__((__const__));
# 1217 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strcat_P(char *, const char *);
# 1233 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern const char * strchr_P(const char *, int __val) __attribute__((__const__));
# 1245 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern const char * strchrnul_P(const char *, int __val) __attribute__((__const__));
# 1258 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int strcmp_P(const char *, const char *) __attribute__((__pure__));
# 1268 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strcpy_P(char *, const char *);
# 1285 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int strcasecmp_P(const char *, const char *) __attribute__((__pure__));






extern char *strcasestr_P(const char *, const char *) __attribute__((__pure__));
# 1305 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strcspn_P(const char *__s, const char * __reject) __attribute__((__pure__));
# 1321 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strlcat_P (char *, const char *, size_t );
# 1334 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strlcpy_P (char *, const char *, size_t );
# 1346 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strnlen_P(const char *, size_t) __attribute__((__const__));
# 1357 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int strncmp_P(const char *, const char *, size_t) __attribute__((__pure__));
# 1376 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int strncasecmp_P(const char *, const char *, size_t) __attribute__((__pure__));
# 1387 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strncat_P(char *, const char *, size_t);
# 1401 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strncpy_P(char *, const char *, size_t);
# 1416 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strpbrk_P(const char *__s, const char * __accept) __attribute__((__pure__));
# 1427 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern const char * strrchr_P(const char *, int __val) __attribute__((__const__));
# 1447 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strsep_P(char **__sp, const char * __delim);
# 1460 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strspn_P(const char *__s, const char * __accept) __attribute__((__pure__));
# 1474 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strstr_P(const char *, const char *) __attribute__((__pure__));
# 1496 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strtok_P(char *__s, const char * __delim);
# 1516 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strtok_rP(char *__s, const char * __delim, char **__last);
# 1529 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strlen_PF(uint_farptr_t src) __attribute__((__const__));
# 1545 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strnlen_PF(uint_farptr_t src, size_t len) __attribute__((__const__));
# 1560 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern void *memcpy_PF(void *dest, uint_farptr_t src, size_t len);
# 1575 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strcpy_PF(char *dest, uint_farptr_t src);
# 1595 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strncpy_PF(char *dest, uint_farptr_t src, size_t len);
# 1611 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strcat_PF(char *dest, uint_farptr_t src);
# 1632 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strlcat_PF(char *dst, uint_farptr_t src, size_t siz);
# 1649 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strncat_PF(char *dest, uint_farptr_t src, size_t len);
# 1665 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int strcmp_PF(const char *s1, uint_farptr_t s2) __attribute__((__pure__));
# 1682 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int strncmp_PF(const char *s1, uint_farptr_t s2, size_t n) __attribute__((__pure__));
# 1698 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int strcasecmp_PF(const char *s1, uint_farptr_t s2) __attribute__((__pure__));
# 1716 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int strncasecmp_PF(const char *s1, uint_farptr_t s2, size_t n) __attribute__((__pure__));
# 1732 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern char *strstr_PF(const char *s1, uint_farptr_t s2);
# 1744 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t strlcpy_PF(char *dst, uint_farptr_t src, size_t siz);
# 1760 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern int memcmp_PF(const void *, uint_farptr_t, size_t) __attribute__((__pure__));
# 1779 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/pgmspace.h" 3
extern size_t __strlen_P(const char *) __attribute__((__const__));
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
}



}
# 29 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2

# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/interrupt.h" 1 3
# 31 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2

# 1 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/binary.h" 1
# 33 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2


extern "C"{


void yield(void);
# 121 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h"
typedef unsigned int word;



typedef bool boolean;
typedef uint8_t byte;

void init(void);
void initVariant(void);

int atexit(void (*func)()) __attribute__((weak));

void pinMode(uint8_t, uint8_t);
void digitalWrite(uint8_t, uint8_t);
int digitalRead(uint8_t);
int analogRead(uint8_t);
void analogReference(uint8_t mode);
void analogWrite(uint8_t, int);

unsigned long millis(void);
unsigned long micros(void);
void delay(unsigned long);
void delayMicroseconds(unsigned int us);
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);
unsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);
uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);

void attachInterrupt(uint8_t, void (*)(void), int mode);
void detachInterrupt(uint8_t);

void setup(void);
void loop(void);
# 163 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h"
extern const uint16_t __attribute__((__progmem__)) port_to_mode_PGM[];
extern const uint16_t __attribute__((__progmem__)) port_to_input_PGM[];
extern const uint16_t __attribute__((__progmem__)) port_to_output_PGM[];

extern const uint8_t __attribute__((__progmem__)) digital_pin_to_port_PGM[];

extern const uint8_t __attribute__((__progmem__)) digital_pin_to_bit_mask_PGM[];
extern const uint8_t __attribute__((__progmem__)) digital_pin_to_timer_PGM[];
# 226 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h"
}



# 1 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/WCharacter.h" 1
# 23 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/WCharacter.h"
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/ctype.h" 1 3
# 48 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/ctype.h" 3
extern "C" {
# 74 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/ctype.h" 3
extern int isalnum(int __c) __attribute__((__const__));






extern int isalpha(int __c) __attribute__((__const__));






extern int isascii(int __c) __attribute__((__const__));





extern int isblank(int __c) __attribute__((__const__));





extern int iscntrl(int __c) __attribute__((__const__));





extern int isdigit(int __c) __attribute__((__const__));





extern int isgraph(int __c) __attribute__((__const__));





extern int islower(int __c) __attribute__((__const__));





extern int isprint(int __c) __attribute__((__const__));






extern int ispunct(int __c) __attribute__((__const__));







extern int isspace(int __c) __attribute__((__const__));





extern int isupper(int __c) __attribute__((__const__));






extern int isxdigit(int __c) __attribute__((__const__));
# 173 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/ctype.h" 3
extern int toascii(int __c) __attribute__((__const__));





extern int tolower(int __c) __attribute__((__const__));





extern int toupper(int __c) __attribute__((__const__));




}
# 24 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/WCharacter.h" 2


inline boolean isAlphaNumeric(int c) __attribute__((always_inline));
inline boolean isAlpha(int c) __attribute__((always_inline));
inline boolean isAscii(int c) __attribute__((always_inline));
inline boolean isWhitespace(int c) __attribute__((always_inline));
inline boolean isControl(int c) __attribute__((always_inline));
inline boolean isDigit(int c) __attribute__((always_inline));
inline boolean isGraph(int c) __attribute__((always_inline));
inline boolean isLowerCase(int c) __attribute__((always_inline));
inline boolean isPrintable(int c) __attribute__((always_inline));
inline boolean isPunct(int c) __attribute__((always_inline));
inline boolean isSpace(int c) __attribute__((always_inline));
inline boolean isUpperCase(int c) __attribute__((always_inline));
inline boolean isHexadecimalDigit(int c) __attribute__((always_inline));
inline int toAscii(int c) __attribute__((always_inline));
inline int toLowerCase(int c) __attribute__((always_inline));
inline int toUpperCase(int c)__attribute__((always_inline));




inline boolean isAlphaNumeric(int c)
{
  return ( isalnum(c) == 0 ? false : true);
}




inline boolean isAlpha(int c)
{
  return ( isalpha(c) == 0 ? false : true);
}




inline boolean isAscii(int c)
{
  return ( isascii (c) == 0 ? false : true);
}



inline boolean isWhitespace(int c)
{
  return ( isblank (c) == 0 ? false : true);
}



inline boolean isControl(int c)
{
  return ( iscntrl (c) == 0 ? false : true);
}



inline boolean isDigit(int c)
{
  return ( isdigit (c) == 0 ? false : true);
}



inline boolean isGraph(int c)
{
  return ( isgraph (c) == 0 ? false : true);
}



inline boolean isLowerCase(int c)
{
  return (islower (c) == 0 ? false : true);
}



inline boolean isPrintable(int c)
{
  return ( isprint (c) == 0 ? false : true);
}




inline boolean isPunct(int c)
{
  return ( ispunct (c) == 0 ? false : true);
}





inline boolean isSpace(int c)
{
  return ( isspace (c) == 0 ? false : true);
}



inline boolean isUpperCase(int c)
{
  return ( isupper (c) == 0 ? false : true);
}




inline boolean isHexadecimalDigit(int c)
{
  return ( isxdigit (c) == 0 ? false : true);
}




inline int toAscii(int c)
{
  return toascii (c);
}
# 156 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/WCharacter.h"
inline int toLowerCase(int c)
{
  return tolower (c);
}



inline int toUpperCase(int c)
{
  return toupper (c);
}
# 231 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2
# 1 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/WString.h" 1
# 37 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/WString.h"
class __FlashStringHelper;




class StringSumHelper;


class String
{



 typedef void (String::*StringIfHelperType)() const;
 void StringIfHelper() const {}

public:





 String(const char *cstr = "");
 String(const String &str);
 String(const __FlashStringHelper *str);

 String(String &&rval);
 String(StringSumHelper &&rval);

 explicit String(char c);
 explicit String(unsigned char, unsigned char base=10);
 explicit String(int, unsigned char base=10);
 explicit String(unsigned int, unsigned char base=10);
 explicit String(long, unsigned char base=10);
 explicit String(unsigned long, unsigned char base=10);
 explicit String(float, unsigned char decimalPlaces=2);
 explicit String(double, unsigned char decimalPlaces=2);
 ~String(void);





 unsigned char reserve(unsigned int size);
 inline unsigned int length(void) const {return len;}




 String & operator = (const String &rhs);
 String & operator = (const char *cstr);
 String & operator = (const __FlashStringHelper *str);

 String & operator = (String &&rval);
 String & operator = (StringSumHelper &&rval);







 unsigned char concat(const String &str);
 unsigned char concat(const char *cstr);
 unsigned char concat(char c);
 unsigned char concat(unsigned char c);
 unsigned char concat(int num);
 unsigned char concat(unsigned int num);
 unsigned char concat(long num);
 unsigned char concat(unsigned long num);
 unsigned char concat(float num);
 unsigned char concat(double num);
 unsigned char concat(const __FlashStringHelper * str);



 String & operator += (const String &rhs) {concat(rhs); return (*this);}
 String & operator += (const char *cstr) {concat(cstr); return (*this);}
 String & operator += (char c) {concat(c); return (*this);}
 String & operator += (unsigned char num) {concat(num); return (*this);}
 String & operator += (int num) {concat(num); return (*this);}
 String & operator += (unsigned int num) {concat(num); return (*this);}
 String & operator += (long num) {concat(num); return (*this);}
 String & operator += (unsigned long num) {concat(num); return (*this);}
 String & operator += (float num) {concat(num); return (*this);}
 String & operator += (double num) {concat(num); return (*this);}
 String & operator += (const __FlashStringHelper *str){concat(str); return (*this);}

 friend StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, char c);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, int num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, long num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);


 operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
 int compareTo(const String &s) const;
 unsigned char equals(const String &s) const;
 unsigned char equals(const char *cstr) const;
 unsigned char operator == (const String &rhs) const {return equals(rhs);}
 unsigned char operator == (const char *cstr) const {return equals(cstr);}
 unsigned char operator != (const String &rhs) const {return !equals(rhs);}
 unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 unsigned char operator < (const String &rhs) const;
 unsigned char operator > (const String &rhs) const;
 unsigned char operator <= (const String &rhs) const;
 unsigned char operator >= (const String &rhs) const;
 unsigned char equalsIgnoreCase(const String &s) const;
 unsigned char startsWith( const String &prefix) const;
 unsigned char startsWith(const String &prefix, unsigned int offset) const;
 unsigned char endsWith(const String &suffix) const;


 char charAt(unsigned int index) const;
 void setCharAt(unsigned int index, char c);
 char operator [] (unsigned int index) const;
 char& operator [] (unsigned int index);
 void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
 void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
  { getBytes((unsigned char *)buf, bufsize, index); }
 const char* c_str() const { return buffer; }
 char* begin() { return buffer; }
 char* end() { return buffer + length(); }
 const char* begin() const { return c_str(); }
 const char* end() const { return c_str() + length(); }


 int indexOf( char ch ) const;
 int indexOf( char ch, unsigned int fromIndex ) const;
 int indexOf( const String &str ) const;
 int indexOf( const String &str, unsigned int fromIndex ) const;
 int lastIndexOf( char ch ) const;
 int lastIndexOf( char ch, unsigned int fromIndex ) const;
 int lastIndexOf( const String &str ) const;
 int lastIndexOf( const String &str, unsigned int fromIndex ) const;
 String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
 String substring( unsigned int beginIndex, unsigned int endIndex ) const;


 void replace(char find, char replace);
 void replace(const String& find, const String& replace);
 void remove(unsigned int index);
 void remove(unsigned int index, unsigned int count);
 void toLowerCase(void);
 void toUpperCase(void);
 void trim(void);


 long toInt(void) const;
 float toFloat(void) const;
 double toDouble(void) const;

protected:
 char *buffer;
 unsigned int capacity;
 unsigned int len;
protected:
 void init(void);
 void invalidate(void);
 unsigned char changeBuffer(unsigned int maxStrLen);
 unsigned char concat(const char *cstr, unsigned int length);


 String & copy(const char *cstr, unsigned int length);
 String & copy(const __FlashStringHelper *pstr, unsigned int length);

 void move(String &rhs);

};

class StringSumHelper : public String
{
public:
 StringSumHelper(const String &s) : String(s) {}
 StringSumHelper(const char *p) : String(p) {}
 StringSumHelper(char c) : String(c) {}
 StringSumHelper(unsigned char num) : String(num) {}
 StringSumHelper(int num) : String(num) {}
 StringSumHelper(unsigned int num) : String(num) {}
 StringSumHelper(long num) : String(num) {}
 StringSumHelper(unsigned long num) : String(num) {}
 StringSumHelper(float num) : String(num) {}
 StringSumHelper(double num) : String(num) {}
};
# 232 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2
# 1 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/HardwareSerial.h" 1
# 29 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/HardwareSerial.h"
# 1 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Stream.h" 1
# 26 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Stream.h"
# 1 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Print.h" 1
# 24 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Print.h"
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 1 3
# 45 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stdarg.h" 1 3 4
# 40 "/opt/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 98 "/opt/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 46 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 2 3




# 1 "/opt/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stddef.h" 1 3 4
# 51 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 2 3
# 244 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
struct __file {
 char *buf;
 unsigned char unget;
 uint8_t flags;
# 263 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
 int size;
 int len;
 int (*put)(char, struct __file *);
 int (*get)(struct __file *);
 void *udata;
};
# 277 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
typedef struct __file FILE;
# 399 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern "C" {







extern struct __file *__iob[];
# 419 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern FILE *fdevopen(int (*__put)(char, FILE*), int (*__get)(FILE*));
# 436 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern int fclose(FILE *__stream);
# 610 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern int vfprintf(FILE *__stream, const char *__fmt, va_list __ap);





extern int vfprintf_P(FILE *__stream, const char *__fmt, va_list __ap);






extern int fputc(int __c, FILE *__stream);




extern int putc(int __c, FILE *__stream);


extern int putchar(int __c);
# 651 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern int printf(const char *__fmt, ...);





extern int printf_P(const char *__fmt, ...);







extern int vprintf(const char *__fmt, va_list __ap);





extern int sprintf(char *__s, const char *__fmt, ...);





extern int sprintf_P(char *__s, const char *__fmt, ...);
# 687 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern int snprintf(char *__s, size_t __n, const char *__fmt, ...);





extern int snprintf_P(char *__s, size_t __n, const char *__fmt, ...);





extern int vsprintf(char *__s, const char *__fmt, va_list ap);





extern int vsprintf_P(char *__s, const char *__fmt, va_list ap);
# 715 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern int vsnprintf(char *__s, size_t __n, const char *__fmt, va_list ap);





extern int vsnprintf_P(char *__s, size_t __n, const char *__fmt, va_list ap);




extern int fprintf(FILE *__stream, const char *__fmt, ...);





extern int fprintf_P(FILE *__stream, const char *__fmt, ...);






extern int fputs(const char *__str, FILE *__stream);




extern int fputs_P(const char *__str, FILE *__stream);





extern int puts(const char *__str);




extern int puts_P(const char *__str);
# 764 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern size_t fwrite(const void *__ptr, size_t __size, size_t __nmemb,
         FILE *__stream);







extern int fgetc(FILE *__stream);




extern int getc(FILE *__stream);


extern int getchar(void);
# 812 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern int ungetc(int __c, FILE *__stream);
# 824 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern char *fgets(char *__str, int __size, FILE *__stream);






extern char *gets(char *__str);
# 842 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern size_t fread(void *__ptr, size_t __size, size_t __nmemb,
        FILE *__stream);




extern void clearerr(FILE *__stream);
# 859 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern int feof(FILE *__stream);
# 870 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
extern int ferror(FILE *__stream);






extern int vfscanf(FILE *__stream, const char *__fmt, va_list __ap);




extern int vfscanf_P(FILE *__stream, const char *__fmt, va_list __ap);







extern int fscanf(FILE *__stream, const char *__fmt, ...);




extern int fscanf_P(FILE *__stream, const char *__fmt, ...);






extern int scanf(const char *__fmt, ...);




extern int scanf_P(const char *__fmt, ...);







extern int vscanf(const char *__fmt, va_list __ap);







extern int sscanf(const char *__buf, const char *__fmt, ...);




extern int sscanf_P(const char *__buf, const char *__fmt, ...);
# 940 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/stdio.h" 3
static __inline__ int fflush(FILE *stream __attribute__((unused)))
{
 return 0;
}






__extension__ typedef long long fpos_t;
extern int fgetpos(FILE *stream, fpos_t *pos);
extern FILE *fopen(const char *path, const char *mode);
extern FILE *freopen(const char *path, const char *mode, FILE *stream);
extern FILE *fdopen(int, const char *);
extern int fseek(FILE *stream, long offset, int whence);
extern int fsetpos(FILE *stream, fpos_t *pos);
extern long ftell(FILE *stream);
extern int fileno(FILE *);
extern void perror(const char *s);
extern int remove(const char *pathname);
extern int rename(const char *oldpath, const char *newpath);
extern void rewind(FILE *stream);
extern void setbuf(FILE *stream, char *buf);
extern int setvbuf(FILE *stream, char *buf, int mode, size_t size);
extern FILE *tmpfile(void);
extern char *tmpnam (char *s);



}
# 25 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Print.h" 2


# 1 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Printable.h" 1
# 25 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Printable.h"
class Print;







class Printable
{
  public:
    virtual size_t printTo(Print& p) const = 0;
};
# 28 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Print.h" 2
# 37 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Print.h"
class Print
{
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == __null) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    }



    virtual int availableForWrite() { return 0; }

    size_t print(const __FlashStringHelper *);
    size_t print(const String &);
    size_t print(const char[]);
    size_t print(char);
    size_t print(unsigned char, int = 10);
    size_t print(int, int = 10);
    size_t print(unsigned int, int = 10);
    size_t print(long, int = 10);
    size_t print(unsigned long, int = 10);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    size_t println(const char[]);
    size_t println(char);
    size_t println(unsigned char, int = 10);
    size_t println(int, int = 10);
    size_t println(unsigned int, int = 10);
    size_t println(long, int = 10);
    size_t println(unsigned long, int = 10);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { }
};
# 27 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Stream.h" 2
# 41 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Stream.h"
enum LookaheadMode{
    SKIP_ALL,
    SKIP_NONE,
    SKIP_WHITESPACE
};



class Stream : public Print
{
  protected:
    unsigned long _timeout;
    unsigned long _startMillis;
    int timedRead();
    int timedPeek();
    int peekNextDigit(LookaheadMode lookahead, bool detectDecimal);

  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}



  void setTimeout(unsigned long timeout);
  unsigned long getTimeout(void) { return _timeout; }

  bool find(char *target);
  bool find(uint8_t *target) { return find ((char *)target); }


  bool find(char *target, size_t length);
  bool find(uint8_t *target, size_t length) { return find ((char *)target, length); }


  bool find(char target) { return find (&target, 1); }

  bool findUntil(char *target, char *terminator);
  bool findUntil(uint8_t *target, char *terminator) { return findUntil((char *)target, terminator); }

  bool findUntil(char *target, size_t targetLen, char *terminate, size_t termLen);
  bool findUntil(uint8_t *target, size_t targetLen, char *terminate, size_t termLen) {return findUntil((char *)target, targetLen, terminate, termLen); }

  long parseInt(LookaheadMode lookahead = SKIP_ALL, char ignore = '\x01');






  float parseFloat(LookaheadMode lookahead = SKIP_ALL, char ignore = '\x01');


  size_t readBytes( char *buffer, size_t length);
  size_t readBytes( uint8_t *buffer, size_t length) { return readBytes((char *)buffer, length); }



  size_t readBytesUntil( char terminator, char *buffer, size_t length);
  size_t readBytesUntil( char terminator, uint8_t *buffer, size_t length) { return readBytesUntil(terminator, (char *)buffer, length); }




  String readString();
  String readStringUntil(char terminator);

  protected:
  long parseInt(char ignore) { return parseInt(SKIP_ALL, ignore); }
  float parseFloat(char ignore) { return parseFloat(SKIP_ALL, ignore); }




  struct MultiTarget {
    const char *str;
    size_t len;
    size_t index;
  };



  int findMulti(struct MultiTarget *targets, int tCount);
};
# 30 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/HardwareSerial.h" 2
# 59 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/HardwareSerial.h"
typedef uint8_t tx_buffer_index_t;




typedef uint8_t rx_buffer_index_t;
# 93 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/HardwareSerial.h"
class HardwareSerial : public Stream
{
  protected:
    volatile uint8_t * const _ubrrh;
    volatile uint8_t * const _ubrrl;
    volatile uint8_t * const _ucsra;
    volatile uint8_t * const _ucsrb;
    volatile uint8_t * const _ucsrc;
    volatile uint8_t * const _udr;

    bool _written;

    volatile rx_buffer_index_t _rx_buffer_head;
    volatile rx_buffer_index_t _rx_buffer_tail;
    volatile tx_buffer_index_t _tx_buffer_head;
    volatile tx_buffer_index_t _tx_buffer_tail;




    unsigned char _rx_buffer[64];
    unsigned char _tx_buffer[64];

  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, 0x06); }
    void begin(unsigned long, uint8_t);
    void end();
    virtual int available(void);
    virtual int peek(void);
    virtual int read(void);
    virtual int availableForWrite(void);
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write;
    operator bool() { return true; }


    inline void _rx_complete_irq(void);
    void _tx_udr_empty_irq(void);
};


  extern HardwareSerial Serial;
# 159 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/HardwareSerial.h"
extern void serialEventRun(void) __attribute__((weak));
# 233 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2
# 1 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/USBAPI.h" 1
# 25 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/USBAPI.h"
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/eeprom.h" 1 3
# 50 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/eeprom.h" 3
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stddef.h" 1 3 4
# 147 "/opt/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 422 "/opt/arduino-1.8.5/hardware/tools/avr/lib/gcc/avr/4.9.2/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 51 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/eeprom.h" 2 3
# 92 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/eeprom.h" 3
extern "C" {
# 137 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/eeprom.h" 3
uint8_t eeprom_read_byte (const uint8_t *__p) __attribute__((__pure__));




uint16_t eeprom_read_word (const uint16_t *__p) __attribute__((__pure__));




uint32_t eeprom_read_dword (const uint32_t *__p) __attribute__((__pure__));




float eeprom_read_float (const float *__p) __attribute__((__pure__));





void eeprom_read_block (void *__dst, const void *__src, size_t __n);





void eeprom_write_byte (uint8_t *__p, uint8_t __value);




void eeprom_write_word (uint16_t *__p, uint16_t __value);




void eeprom_write_dword (uint32_t *__p, uint32_t __value);




void eeprom_write_float (float *__p, float __value);





void eeprom_write_block (const void *__src, void *__dst, size_t __n);





void eeprom_update_byte (uint8_t *__p, uint8_t __value);




void eeprom_update_word (uint16_t *__p, uint16_t __value);




void eeprom_update_dword (uint32_t *__p, uint32_t __value);




void eeprom_update_float (float *__p, float __value);





void eeprom_update_block (const void *__src, void *__dst, size_t __n);
# 241 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/avr/eeprom.h" 3
}
# 26 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/USBAPI.h" 2

# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 1 3
# 45 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 3
# 1 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay_basic.h" 1 3
# 40 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay_basic.h" 3
static __inline__ void _delay_loop_1(uint8_t __count) __attribute__((__always_inline__));
static __inline__ void _delay_loop_2(uint16_t __count) __attribute__((__always_inline__));
# 80 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay_basic.h" 3
void
_delay_loop_1(uint8_t __count)
{
 __asm__ volatile (
  "1: dec %0" "\n\t"
  "brne 1b"
  : "=r" (__count)
  : "0" (__count)
 );
}
# 102 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay_basic.h" 3
void
_delay_loop_2(uint16_t __count)
{
 __asm__ volatile (
  "1: sbiw %0,1" "\n\t"
  "brne 1b"
  : "=w" (__count)
  : "0" (__count)
 );
}
# 46 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 2 3
# 86 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 3
static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
# 165 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 3
void
_delay_ms(double __ms)
{
 double __tmp ;



 uint32_t __ticks_dc;
 extern void __builtin_avr_delay_cycles(unsigned long);
 __tmp = ((16000000L) / 1e3) * __ms;
# 184 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 3
  __ticks_dc = (uint32_t)(ceil(fabs(__tmp)));


 __builtin_avr_delay_cycles(__ticks_dc);
# 210 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 3
}
# 254 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 3
void
_delay_us(double __us)
{
 double __tmp ;



 uint32_t __ticks_dc;
 extern void __builtin_avr_delay_cycles(unsigned long);
 __tmp = ((16000000L) / 1e6) * __us;
# 273 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 3
  __ticks_dc = (uint32_t)(ceil(fabs(__tmp)));


 __builtin_avr_delay_cycles(__ticks_dc);
# 299 "/opt/arduino-1.8.5/hardware/tools/avr/avr/include/util/delay.h" 3
}
# 28 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/USBAPI.h" 2

typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned long u32;

# 1 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 1
# 34 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/USBAPI.h" 2
# 234 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2




uint16_t makeWord(uint16_t w);
uint16_t makeWord(byte h, byte l);



unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);
unsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);
void noTone(uint8_t _pin);


long random(long);
long random(long, long);
void randomSeed(unsigned long);
long map(long, long, long, long, long);



# 1 "/opt/arduino-1.8.5/hardware/arduino/avr/variants/standard/pins_arduino.h" 1
# 43 "/opt/arduino-1.8.5/hardware/arduino/avr/variants/standard/pins_arduino.h"
static const uint8_t SS = (10);
static const uint8_t MOSI = (11);
static const uint8_t MISO = (12);
static const uint8_t SCK = (13);




static const uint8_t SDA = (18);
static const uint8_t SCL = (19);
# 65 "/opt/arduino-1.8.5/hardware/arduino/avr/variants/standard/pins_arduino.h"
static const uint8_t A0 = (14);
static const uint8_t A1 = (15);
static const uint8_t A2 = (16);
static const uint8_t A3 = (17);
static const uint8_t A4 = (18);
static const uint8_t A5 = (19);
static const uint8_t A6 = (20);
static const uint8_t A7 = (21);
# 258 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Arduino.h" 2
# 6 "../lib/Adafruit_GFX/Adafruit_GFX.h" 2
# 1 "/opt/arduino-1.8.5/hardware/arduino/avr/cores/arduino/Print.h" 1
# 7 "../lib/Adafruit_GFX/Adafruit_GFX.h" 2



# 1 "../lib/Adafruit_GFX/gfxfont.h" 1
# 11 "../lib/Adafruit_GFX/gfxfont.h"
typedef struct {
 uint16_t bitmapOffset;
 uint8_t width;
        uint8_t height;
 uint8_t xAdvance;
 int8_t xOffset;
        int8_t yOffset;
} GFXglyph;


typedef struct {
 uint8_t *bitmap;
 GFXglyph *glyph;
 uint8_t first;
        uint8_t last;
 uint8_t yAdvance;
} GFXfont;
# 11 "../lib/Adafruit_GFX/Adafruit_GFX.h" 2


class Adafruit_GFX : public Print {

 public:

  Adafruit_GFX(int16_t w, int16_t h);


  virtual void drawPixel(int16_t x, int16_t y, uint16_t color) = 0;




  virtual void startWrite(void);
  virtual void writePixel(int16_t x, int16_t y, uint16_t color);
  virtual void writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color);
  virtual void writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
  virtual void writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color);
  virtual void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color);
  virtual void endWrite(void);




  virtual void setRotation(uint8_t r);
  virtual void invertDisplay(boolean i);




  virtual void

    drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color),
    drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color),
    fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color),
    fillScreen(uint16_t color),

    drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color),
    drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color);


  void
    drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color),
    drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
      uint16_t color),
    fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color),
    fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
      int16_t delta, uint16_t color),
    drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
      int16_t x2, int16_t y2, uint16_t color),
    fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
      int16_t x2, int16_t y2, uint16_t color),
    drawRoundRect(int16_t x0, int16_t y0, int16_t w, int16_t h,
      int16_t radius, uint16_t color),
    fillRoundRect(int16_t x0, int16_t y0, int16_t w, int16_t h,
      int16_t radius, uint16_t color),
    drawBitmap(int16_t x, int16_t y, const uint8_t bitmap[],
      int16_t w, int16_t h, uint16_t color),
    drawBitmap(int16_t x, int16_t y, const uint8_t bitmap[],
      int16_t w, int16_t h, uint16_t color, uint16_t bg),
    drawBitmap(int16_t x, int16_t y, uint8_t *bitmap,
      int16_t w, int16_t h, uint16_t color),
    drawBitmap(int16_t x, int16_t y, uint8_t *bitmap,
      int16_t w, int16_t h, uint16_t color, uint16_t bg),
    drawXBitmap(int16_t x, int16_t y, const uint8_t bitmap[],
      int16_t w, int16_t h, uint16_t color),
    drawGrayscaleBitmap(int16_t x, int16_t y, const uint8_t bitmap[],
      int16_t w, int16_t h),
    drawGrayscaleBitmap(int16_t x, int16_t y, uint8_t *bitmap,
      int16_t w, int16_t h),
    drawGrayscaleBitmap(int16_t x, int16_t y,
      const uint8_t bitmap[], const uint8_t mask[],
      int16_t w, int16_t h),
    drawGrayscaleBitmap(int16_t x, int16_t y,
      uint8_t *bitmap, uint8_t *mask, int16_t w, int16_t h),
    drawRGBBitmap(int16_t x, int16_t y, const uint16_t bitmap[],
      int16_t w, int16_t h),
    drawRGBBitmap(int16_t x, int16_t y, uint16_t *bitmap,
      int16_t w, int16_t h),
    drawRGBBitmap(int16_t x, int16_t y,
      const uint16_t bitmap[], const uint8_t mask[],
      int16_t w, int16_t h),
    drawRGBBitmap(int16_t x, int16_t y,
      uint16_t *bitmap, uint8_t *mask, int16_t w, int16_t h),
    drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
      uint16_t bg, uint8_t size),
    setCursor(int16_t x, int16_t y),
    setTextColor(uint16_t c),
    setTextColor(uint16_t c, uint16_t bg),
    setTextSize(uint8_t s),
    setTextWrap(boolean w),
    cp437(boolean x=true),
    setFont(const GFXfont *f = __null),
    getTextBounds(char *string, int16_t x, int16_t y,
      int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h),
    getTextBounds(const __FlashStringHelper *s, int16_t x, int16_t y,
      int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h);


  virtual size_t write(uint8_t);




  int16_t height(void) const;
  int16_t width(void) const;

  uint8_t getRotation(void) const;


  int16_t getCursorX(void) const;
  int16_t getCursorY(void) const;

 protected:
  void
    charBounds(char c, int16_t *x, int16_t *y,
      int16_t *minx, int16_t *miny, int16_t *maxx, int16_t *maxy);
  const int16_t
    WIDTH,
    HEIGHT;
  int16_t
    _width,
    _height,
    cursor_x,
    cursor_y;
  uint16_t
    textcolor,
    textbgcolor;
  uint8_t
    textsize,
    rotation;
  boolean
    wrap,
    _cp437;
  GFXfont
    *gfxFont;
};



class Adafruit_GFX_Button {

 public:
  Adafruit_GFX_Button(void);

  void initButton(Adafruit_GFX *gfx, int16_t x, int16_t y,
   uint16_t w, uint16_t h, uint16_t outline, uint16_t fill,
   uint16_t textcolor, char *label, uint8_t textsize);

  void initButtonUL(Adafruit_GFX *gfx, int16_t x1, int16_t y1,
   uint16_t w, uint16_t h, uint16_t outline, uint16_t fill,
   uint16_t textcolor, char *label, uint8_t textsize);
  void drawButton(boolean inverted = false);
  boolean contains(int16_t x, int16_t y);

  void press(boolean p);
  boolean isPressed();
  boolean justPressed();
  boolean justReleased();

 private:
  Adafruit_GFX *_gfx;
  int16_t _x1, _y1;
  uint16_t _w, _h;
  uint8_t _textsize;
  uint16_t _outlinecolor, _fillcolor, _textcolor;
  char _label[10];

  boolean currstate, laststate;
};



class GFXcanvas1 : public Adafruit_GFX {
 public:
  GFXcanvas1(uint16_t w, uint16_t h);
  ~GFXcanvas1(void);
  void drawPixel(int16_t x, int16_t y, uint16_t color),
           fillScreen(uint16_t color);
  uint8_t *getBuffer(void);
 private:
  uint8_t *buffer;
};



class GFXcanvas8 : public Adafruit_GFX {
 public:
  GFXcanvas8(uint16_t w, uint16_t h);
  ~GFXcanvas8(void);
  void drawPixel(int16_t x, int16_t y, uint16_t color),
           fillScreen(uint16_t color),
           writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color);

  uint8_t *getBuffer(void);
 private:
  uint8_t *buffer;
};



class GFXcanvas16 : public Adafruit_GFX {
 public:
  GFXcanvas16(uint16_t w, uint16_t h);
  ~GFXcanvas16(void);
  void drawPixel(int16_t x, int16_t y, uint16_t color),
            fillScreen(uint16_t color);
  uint16_t *getBuffer(void);
 private:
  uint16_t *buffer;
};
# 35 "../lib/Adafruit_GFX/Adafruit_GFX.cpp" 2
# 1 "../lib/Adafruit_GFX/glcdfont.c" 1
# 18 "../lib/Adafruit_GFX/glcdfont.c"
static const unsigned char font[] __attribute__((__progmem__)) = {
 0x00, 0x00, 0x00, 0x00, 0x00,
 0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
 0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
 0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
 0x18, 0x3C, 0x7E, 0x3C, 0x18,
 0x1C, 0x57, 0x7D, 0x57, 0x1C,
 0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
 0x00, 0x18, 0x3C, 0x18, 0x00,
 0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
 0x00, 0x18, 0x24, 0x18, 0x00,
 0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
 0x30, 0x48, 0x3A, 0x06, 0x0E,
 0x26, 0x29, 0x79, 0x29, 0x26,
 0x40, 0x7F, 0x05, 0x05, 0x07,
 0x40, 0x7F, 0x05, 0x25, 0x3F,
 0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
 0x7F, 0x3E, 0x1C, 0x1C, 0x08,
 0x08, 0x1C, 0x1C, 0x3E, 0x7F,
 0x14, 0x22, 0x7F, 0x22, 0x14,
 0x5F, 0x5F, 0x00, 0x5F, 0x5F,
 0x06, 0x09, 0x7F, 0x01, 0x7F,
 0x00, 0x66, 0x89, 0x95, 0x6A,
 0x60, 0x60, 0x60, 0x60, 0x60,
 0x94, 0xA2, 0xFF, 0xA2, 0x94,
 0x08, 0x04, 0x7E, 0x04, 0x08,
 0x10, 0x20, 0x7E, 0x20, 0x10,
 0x08, 0x08, 0x2A, 0x1C, 0x08,
 0x08, 0x1C, 0x2A, 0x08, 0x08,
 0x1E, 0x10, 0x10, 0x10, 0x10,
 0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
 0x30, 0x38, 0x3E, 0x38, 0x30,
 0x06, 0x0E, 0x3E, 0x0E, 0x06,
 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x5F, 0x00, 0x00,
 0x00, 0x07, 0x00, 0x07, 0x00,
 0x14, 0x7F, 0x14, 0x7F, 0x14,
 0x24, 0x2A, 0x7F, 0x2A, 0x12,
 0x23, 0x13, 0x08, 0x64, 0x62,
 0x36, 0x49, 0x56, 0x20, 0x50,
 0x00, 0x08, 0x07, 0x03, 0x00,
 0x00, 0x1C, 0x22, 0x41, 0x00,
 0x00, 0x41, 0x22, 0x1C, 0x00,
 0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
 0x08, 0x08, 0x3E, 0x08, 0x08,
 0x00, 0x80, 0x70, 0x30, 0x00,
 0x08, 0x08, 0x08, 0x08, 0x08,
 0x00, 0x00, 0x60, 0x60, 0x00,
 0x20, 0x10, 0x08, 0x04, 0x02,
 0x3E, 0x51, 0x49, 0x45, 0x3E,
 0x00, 0x42, 0x7F, 0x40, 0x00,
 0x72, 0x49, 0x49, 0x49, 0x46,
 0x21, 0x41, 0x49, 0x4D, 0x33,
 0x18, 0x14, 0x12, 0x7F, 0x10,
 0x27, 0x45, 0x45, 0x45, 0x39,
 0x3C, 0x4A, 0x49, 0x49, 0x31,
 0x41, 0x21, 0x11, 0x09, 0x07,
 0x36, 0x49, 0x49, 0x49, 0x36,
 0x46, 0x49, 0x49, 0x29, 0x1E,
 0x00, 0x00, 0x14, 0x00, 0x00,
 0x00, 0x40, 0x34, 0x00, 0x00,
 0x00, 0x08, 0x14, 0x22, 0x41,
 0x14, 0x14, 0x14, 0x14, 0x14,
 0x00, 0x41, 0x22, 0x14, 0x08,
 0x02, 0x01, 0x59, 0x09, 0x06,
 0x3E, 0x41, 0x5D, 0x59, 0x4E,
 0x7C, 0x12, 0x11, 0x12, 0x7C,
 0x7F, 0x49, 0x49, 0x49, 0x36,
 0x3E, 0x41, 0x41, 0x41, 0x22,
 0x7F, 0x41, 0x41, 0x41, 0x3E,
 0x7F, 0x49, 0x49, 0x49, 0x41,
 0x7F, 0x09, 0x09, 0x09, 0x01,
 0x3E, 0x41, 0x41, 0x51, 0x73,
 0x7F, 0x08, 0x08, 0x08, 0x7F,
 0x00, 0x41, 0x7F, 0x41, 0x00,
 0x20, 0x40, 0x41, 0x3F, 0x01,
 0x7F, 0x08, 0x14, 0x22, 0x41,
 0x7F, 0x40, 0x40, 0x40, 0x40,
 0x7F, 0x02, 0x1C, 0x02, 0x7F,
 0x7F, 0x04, 0x08, 0x10, 0x7F,
 0x3E, 0x41, 0x41, 0x41, 0x3E,
 0x7F, 0x09, 0x09, 0x09, 0x06,
 0x3E, 0x41, 0x51, 0x21, 0x5E,
 0x7F, 0x09, 0x19, 0x29, 0x46,
 0x26, 0x49, 0x49, 0x49, 0x32,
 0x03, 0x01, 0x7F, 0x01, 0x03,
 0x3F, 0x40, 0x40, 0x40, 0x3F,
 0x1F, 0x20, 0x40, 0x20, 0x1F,
 0x3F, 0x40, 0x38, 0x40, 0x3F,
 0x63, 0x14, 0x08, 0x14, 0x63,
 0x03, 0x04, 0x78, 0x04, 0x03,
 0x61, 0x59, 0x49, 0x4D, 0x43,
 0x00, 0x7F, 0x41, 0x41, 0x41,
 0x02, 0x04, 0x08, 0x10, 0x20,
 0x00, 0x41, 0x41, 0x41, 0x7F,
 0x04, 0x02, 0x01, 0x02, 0x04,
 0x40, 0x40, 0x40, 0x40, 0x40,
 0x00, 0x03, 0x07, 0x08, 0x00,
 0x20, 0x54, 0x54, 0x78, 0x40,
 0x7F, 0x28, 0x44, 0x44, 0x38,
 0x38, 0x44, 0x44, 0x44, 0x28,
 0x38, 0x44, 0x44, 0x28, 0x7F,
 0x38, 0x54, 0x54, 0x54, 0x18,
 0x00, 0x08, 0x7E, 0x09, 0x02,
 0x18, 0xA4, 0xA4, 0x9C, 0x78,
 0x7F, 0x08, 0x04, 0x04, 0x78,
 0x00, 0x44, 0x7D, 0x40, 0x00,
 0x20, 0x40, 0x40, 0x3D, 0x00,
 0x7F, 0x10, 0x28, 0x44, 0x00,
 0x00, 0x41, 0x7F, 0x40, 0x00,
 0x7C, 0x04, 0x78, 0x04, 0x78,
 0x7C, 0x08, 0x04, 0x04, 0x78,
 0x38, 0x44, 0x44, 0x44, 0x38,
 0xFC, 0x18, 0x24, 0x24, 0x18,
 0x18, 0x24, 0x24, 0x18, 0xFC,
 0x7C, 0x08, 0x04, 0x04, 0x08,
 0x48, 0x54, 0x54, 0x54, 0x24,
 0x04, 0x04, 0x3F, 0x44, 0x24,
 0x3C, 0x40, 0x40, 0x20, 0x7C,
 0x1C, 0x20, 0x40, 0x20, 0x1C,
 0x3C, 0x40, 0x30, 0x40, 0x3C,
 0x44, 0x28, 0x10, 0x28, 0x44,
 0x4C, 0x90, 0x90, 0x90, 0x7C,
 0x44, 0x64, 0x54, 0x4C, 0x44,
 0x00, 0x08, 0x36, 0x41, 0x00,
 0x00, 0x00, 0x77, 0x00, 0x00,
 0x00, 0x41, 0x36, 0x08, 0x00,
 0x02, 0x01, 0x02, 0x04, 0x02,
 0x3C, 0x26, 0x23, 0x26, 0x3C,
 0x1E, 0xA1, 0xA1, 0x61, 0x12,
 0x3A, 0x40, 0x40, 0x20, 0x7A,
 0x38, 0x54, 0x54, 0x55, 0x59,
 0x21, 0x55, 0x55, 0x79, 0x41,
 0x22, 0x54, 0x54, 0x78, 0x42,
 0x21, 0x55, 0x54, 0x78, 0x40,
 0x20, 0x54, 0x55, 0x79, 0x40,
 0x0C, 0x1E, 0x52, 0x72, 0x12,
 0x39, 0x55, 0x55, 0x55, 0x59,
 0x39, 0x54, 0x54, 0x54, 0x59,
 0x39, 0x55, 0x54, 0x54, 0x58,
 0x00, 0x00, 0x45, 0x7C, 0x41,
 0x00, 0x02, 0x45, 0x7D, 0x42,
 0x00, 0x01, 0x45, 0x7C, 0x40,
 0x7D, 0x12, 0x11, 0x12, 0x7D,
 0xF0, 0x28, 0x25, 0x28, 0xF0,
 0x7C, 0x54, 0x55, 0x45, 0x00,
 0x20, 0x54, 0x54, 0x7C, 0x54,
 0x7C, 0x0A, 0x09, 0x7F, 0x49,
 0x32, 0x49, 0x49, 0x49, 0x32,
 0x3A, 0x44, 0x44, 0x44, 0x3A,
 0x32, 0x4A, 0x48, 0x48, 0x30,
 0x3A, 0x41, 0x41, 0x21, 0x7A,
 0x3A, 0x42, 0x40, 0x20, 0x78,
 0x00, 0x9D, 0xA0, 0xA0, 0x7D,
 0x3D, 0x42, 0x42, 0x42, 0x3D,
 0x3D, 0x40, 0x40, 0x40, 0x3D,
 0x3C, 0x24, 0xFF, 0x24, 0x24,
 0x48, 0x7E, 0x49, 0x43, 0x66,
 0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
 0xFF, 0x09, 0x29, 0xF6, 0x20,
 0xC0, 0x88, 0x7E, 0x09, 0x03,
 0x20, 0x54, 0x54, 0x79, 0x41,
 0x00, 0x00, 0x44, 0x7D, 0x41,
 0x30, 0x48, 0x48, 0x4A, 0x32,
 0x38, 0x40, 0x40, 0x22, 0x7A,
 0x00, 0x7A, 0x0A, 0x0A, 0x72,
 0x7D, 0x0D, 0x19, 0x31, 0x7D,
 0x26, 0x29, 0x29, 0x2F, 0x28,
 0x26, 0x29, 0x29, 0x29, 0x26,
 0x30, 0x48, 0x4D, 0x40, 0x20,
 0x38, 0x08, 0x08, 0x08, 0x08,
 0x08, 0x08, 0x08, 0x08, 0x38,
 0x2F, 0x10, 0xC8, 0xAC, 0xBA,
 0x2F, 0x10, 0x28, 0x34, 0xFA,
 0x00, 0x00, 0x7B, 0x00, 0x00,
 0x08, 0x14, 0x2A, 0x14, 0x22,
 0x22, 0x14, 0x2A, 0x14, 0x08,
 0x55, 0x00, 0x55, 0x00, 0x55,
 0xAA, 0x55, 0xAA, 0x55, 0xAA,
 0xFF, 0x55, 0xFF, 0x55, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0x00,
 0x10, 0x10, 0x10, 0xFF, 0x00,
 0x14, 0x14, 0x14, 0xFF, 0x00,
 0x10, 0x10, 0xFF, 0x00, 0xFF,
 0x10, 0x10, 0xF0, 0x10, 0xF0,
 0x14, 0x14, 0x14, 0xFC, 0x00,
 0x14, 0x14, 0xF7, 0x00, 0xFF,
 0x00, 0x00, 0xFF, 0x00, 0xFF,
 0x14, 0x14, 0xF4, 0x04, 0xFC,
 0x14, 0x14, 0x17, 0x10, 0x1F,
 0x10, 0x10, 0x1F, 0x10, 0x1F,
 0x14, 0x14, 0x14, 0x1F, 0x00,
 0x10, 0x10, 0x10, 0xF0, 0x00,
 0x00, 0x00, 0x00, 0x1F, 0x10,
 0x10, 0x10, 0x10, 0x1F, 0x10,
 0x10, 0x10, 0x10, 0xF0, 0x10,
 0x00, 0x00, 0x00, 0xFF, 0x10,
 0x10, 0x10, 0x10, 0x10, 0x10,
 0x10, 0x10, 0x10, 0xFF, 0x10,
 0x00, 0x00, 0x00, 0xFF, 0x14,
 0x00, 0x00, 0xFF, 0x00, 0xFF,
 0x00, 0x00, 0x1F, 0x10, 0x17,
 0x00, 0x00, 0xFC, 0x04, 0xF4,
 0x14, 0x14, 0x17, 0x10, 0x17,
 0x14, 0x14, 0xF4, 0x04, 0xF4,
 0x00, 0x00, 0xFF, 0x00, 0xF7,
 0x14, 0x14, 0x14, 0x14, 0x14,
 0x14, 0x14, 0xF7, 0x00, 0xF7,
 0x14, 0x14, 0x14, 0x17, 0x14,
 0x10, 0x10, 0x1F, 0x10, 0x1F,
 0x14, 0x14, 0x14, 0xF4, 0x14,
 0x10, 0x10, 0xF0, 0x10, 0xF0,
 0x00, 0x00, 0x1F, 0x10, 0x1F,
 0x00, 0x00, 0x00, 0x1F, 0x14,
 0x00, 0x00, 0x00, 0xFC, 0x14,
 0x00, 0x00, 0xF0, 0x10, 0xF0,
 0x10, 0x10, 0xFF, 0x10, 0xFF,
 0x14, 0x14, 0x14, 0xFF, 0x14,
 0x10, 0x10, 0x10, 0x1F, 0x00,
 0x00, 0x00, 0x00, 0xF0, 0x10,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
 0xFF, 0xFF, 0xFF, 0x00, 0x00,
 0x00, 0x00, 0x00, 0xFF, 0xFF,
 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
 0x38, 0x44, 0x44, 0x38, 0x44,
 0xFC, 0x4A, 0x4A, 0x4A, 0x34,
 0x7E, 0x02, 0x02, 0x06, 0x06,
 0x02, 0x7E, 0x02, 0x7E, 0x02,
 0x63, 0x55, 0x49, 0x41, 0x63,
 0x38, 0x44, 0x44, 0x3C, 0x04,
 0x40, 0x7E, 0x20, 0x1E, 0x20,
 0x06, 0x02, 0x7E, 0x02, 0x02,
 0x99, 0xA5, 0xE7, 0xA5, 0x99,
 0x1C, 0x2A, 0x49, 0x2A, 0x1C,
 0x4C, 0x72, 0x01, 0x72, 0x4C,
 0x30, 0x4A, 0x4D, 0x4D, 0x30,
 0x30, 0x48, 0x78, 0x48, 0x30,
 0xBC, 0x62, 0x5A, 0x46, 0x3D,
 0x3E, 0x49, 0x49, 0x49, 0x00,
 0x7E, 0x01, 0x01, 0x01, 0x7E,
 0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
 0x44, 0x44, 0x5F, 0x44, 0x44,
 0x40, 0x51, 0x4A, 0x44, 0x40,
 0x40, 0x44, 0x4A, 0x51, 0x40,
 0x00, 0x00, 0xFF, 0x01, 0x03,
 0xE0, 0x80, 0xFF, 0x00, 0x00,
 0x08, 0x08, 0x6B, 0x6B, 0x08,
 0x36, 0x12, 0x36, 0x24, 0x36,
 0x06, 0x0F, 0x09, 0x0F, 0x06,
 0x00, 0x00, 0x18, 0x18, 0x00,
 0x00, 0x00, 0x10, 0x10, 0x00,
 0x30, 0x40, 0xFF, 0x01, 0x01,
 0x00, 0x1F, 0x01, 0x01, 0x1E,
 0x00, 0x19, 0x1D, 0x17, 0x12,
 0x00, 0x3C, 0x3C, 0x3C, 0x3C,
 0x00, 0x00, 0x00, 0x00, 0x00
};
# 36 "../lib/Adafruit_GFX/Adafruit_GFX.cpp" 2
# 80 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
WIDTH(w), HEIGHT(h)
{
    _width = WIDTH;
    _height = HEIGHT;
    rotation = 0;
    cursor_y = cursor_x = 0;
    textsize = 1;
    textcolor = textbgcolor = 0xFFFF;
    wrap = true;
    _cp437 = false;
    gfxFont = __null;
}
# 104 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
    int16_t steep = ((y1 - y0)>0?(y1 - y0):-(y1 - y0)) > ((x1 - x0)>0?(x1 - x0):-(x1 - x0));
    if (steep) {
        { int16_t t = x0; x0 = y0; y0 = t; };
        { int16_t t = x1; x1 = y1; y1 = t; };
    }

    if (x0 > x1) {
        { int16_t t = x0; x0 = x1; x1 = t; };
        { int16_t t = y0; y0 = y1; y1 = t; };
    }

    int16_t dx, dy;
    dx = x1 - x0;
    dy = ((y1 - y0)>0?(y1 - y0):-(y1 - y0));

    int16_t err = dx / 2;
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
        if (steep) {
            writePixel(y0, x0, color);
        } else {
            writePixel(x0, y0, color);
        }
        err -= dy;
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}






void Adafruit_GFX::startWrite(){
}
# 160 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
    drawPixel(x, y, color);
}
# 173 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {



    drawFastVLine(x, y, h, color);
}
# 190 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {



    drawFastHLine(x, y, w, color);
}
# 208 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {

    fillRect(x,y,w,h,color);
}






void Adafruit_GFX::endWrite(){
}
# 231 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    startWrite();
    writeLine(x, y, x, y+h-1, color);
    endWrite();
}
# 247 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    startWrite();
    writeLine(x, y, x+w-1, y, color);
    endWrite();
}
# 264 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    startWrite();
    for (int16_t i=x; i<x+w; i++) {
        writeFastVLine(i, y, h, color);
    }
    endWrite();
}







void Adafruit_GFX::fillScreen(uint16_t color) {
    fillRect(0, 0, _width, _height, color);
}
# 293 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {

    if(x0 == x1){
        if(y0 > y1) { int16_t t = y0; y0 = y1; y1 = t; };
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    } else if(y0 == y1){
        if(x0 > x1) { int16_t t = x0; x0 = x1; x1 = t; };
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
# 318 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r,
        uint16_t color) {
    int16_t f = 1 - r;
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    int16_t x = 0;
    int16_t y = r;

    startWrite();
    writePixel(x0 , y0+r, color);
    writePixel(x0 , y0-r, color);
    writePixel(x0+r, y0 , color);
    writePixel(x0-r, y0 , color);

    while (x<y) {
        if (f >= 0) {
            y--;
            ddF_y += 2;
            f += ddF_y;
        }
        x++;
        ddF_x += 2;
        f += ddF_x;

        writePixel(x0 + x, y0 + y, color);
        writePixel(x0 - x, y0 + y, color);
        writePixel(x0 + x, y0 - y, color);
        writePixel(x0 - x, y0 - y, color);
        writePixel(x0 + y, y0 + x, color);
        writePixel(x0 - y, y0 + x, color);
        writePixel(x0 + y, y0 - x, color);
        writePixel(x0 - y, y0 - x, color);
    }
    endWrite();
}
# 364 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawCircleHelper( int16_t x0, int16_t y0,
        int16_t r, uint8_t cornername, uint16_t color) {
    int16_t f = 1 - r;
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    int16_t x = 0;
    int16_t y = r;

    while (x<y) {
        if (f >= 0) {
            y--;
            ddF_y += 2;
            f += ddF_y;
        }
        x++;
        ddF_x += 2;
        f += ddF_x;
        if (cornername & 0x4) {
            writePixel(x0 + x, y0 + y, color);
            writePixel(x0 + y, y0 + x, color);
        }
        if (cornername & 0x2) {
            writePixel(x0 + x, y0 - y, color);
            writePixel(x0 + y, y0 - x, color);
        }
        if (cornername & 0x8) {
            writePixel(x0 - y, y0 + x, color);
            writePixel(x0 - x, y0 + y, color);
        }
        if (cornername & 0x1) {
            writePixel(x0 - y, y0 - x, color);
            writePixel(x0 - x, y0 - y, color);
        }
    }
}
# 409 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::fillCircle(int16_t x0, int16_t y0, int16_t r,
        uint16_t color) {
    startWrite();
    writeFastVLine(x0, y0-r, 2*r+1, color);
    fillCircleHelper(x0, y0, r, 3, 0, color);
    endWrite();
}
# 429 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
        uint8_t cornername, int16_t delta, uint16_t color) {

    int16_t f = 1 - r;
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    int16_t x = 0;
    int16_t y = r;

    while (x<y) {
        if (f >= 0) {
            y--;
            ddF_y += 2;
            f += ddF_y;
        }
        x++;
        ddF_x += 2;
        f += ddF_x;

        if (cornername & 0x1) {
            writeFastVLine(x0+x, y0-y, 2*y+1+delta, color);
            writeFastVLine(x0+y, y0-x, 2*x+1+delta, color);
        }
        if (cornername & 0x2) {
            writeFastVLine(x0-x, y0-y, 2*y+1+delta, color);
            writeFastVLine(x0-y, y0-x, 2*x+1+delta, color);
        }
    }
}
# 469 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    startWrite();
    writeFastHLine(x, y, w, color);
    writeFastHLine(x, y+h-1, w, color);
    writeFastVLine(x, y, h, color);
    writeFastVLine(x+w-1, y, h, color);
    endWrite();
}
# 490 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawRoundRect(int16_t x, int16_t y, int16_t w,
        int16_t h, int16_t r, uint16_t color) {

    startWrite();
    writeFastHLine(x+r , y , w-2*r, color);
    writeFastHLine(x+r , y+h-1, w-2*r, color);
    writeFastVLine(x , y+r , h-2*r, color);
    writeFastVLine(x+w-1, y+r , h-2*r, color);

    drawCircleHelper(x+r , y+r , r, 1, color);
    drawCircleHelper(x+w-r-1, y+r , r, 2, color);
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
    drawCircleHelper(x+r , y+h-r-1, r, 8, color);
    endWrite();
}
# 517 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::fillRoundRect(int16_t x, int16_t y, int16_t w,
        int16_t h, int16_t r, uint16_t color) {

    startWrite();
    writeFillRect(x+r, y, w-2*r, h, color);


    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
    fillCircleHelper(x+r , y+r, r, 2, h-2*r-1, color);
    endWrite();
}
# 541 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawTriangle(int16_t x0, int16_t y0,
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
    drawLine(x0, y0, x1, y1, color);
    drawLine(x1, y1, x2, y2, color);
    drawLine(x2, y2, x0, y0, color);
}
# 560 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::fillTriangle(int16_t x0, int16_t y0,
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {

    int16_t a, b, y, last;


    if (y0 > y1) {
        { int16_t t = y0; y0 = y1; y1 = t; }; { int16_t t = x0; x0 = x1; x1 = t; };
    }
    if (y1 > y2) {
        { int16_t t = y2; y2 = y1; y1 = t; }; { int16_t t = x2; x2 = x1; x1 = t; };
    }
    if (y0 > y1) {
        { int16_t t = y0; y0 = y1; y1 = t; }; { int16_t t = x0; x0 = x1; x1 = t; };
    }

    startWrite();
    if(y0 == y2) {
        a = b = x0;
        if(x1 < a) a = x1;
        else if(x1 > b) b = x1;
        if(x2 < a) a = x2;
        else if(x2 > b) b = x2;
        writeFastHLine(a, y0, b-a+1, color);
        endWrite();
        return;
    }

    int16_t
    dx01 = x1 - x0,
    dy01 = y1 - y0,
    dx02 = x2 - x0,
    dy02 = y2 - y0,
    dx12 = x2 - x1,
    dy12 = y2 - y1;
    int32_t
    sa = 0,
    sb = 0;







    if(y1 == y2) last = y1;
    else last = y1-1;

    for(y=y0; y<=last; y++) {
        a = x0 + sa / dy01;
        b = x0 + sb / dy02;
        sa += dx01;
        sb += dx02;




        if(a > b) { int16_t t = a; a = b; b = t; };
        writeFastHLine(a, y, b-a+1, color);
    }



    sa = dx12 * (y - y1);
    sb = dx02 * (y - y0);
    for(; y<=y2; y++) {
        a = x1 + sa / dy12;
        b = x0 + sb / dy02;
        sa += dx12;
        sb += dx02;




        if(a > b) { int16_t t = a; a = b; b = t; };
        writeFastHLine(a, y, b-a+1, color);
    }
    endWrite();
}
# 653 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {

    int16_t byteWidth = (w + 7) / 8;
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++) {
            if(i & 7) byte <<= 1;
            else byte = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&bitmap[j * byteWidth + i / 8])); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
            if(byte & 0x80) writePixel(x+i, y, color);
        }
    }
    endWrite();
}
# 682 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
  const uint8_t bitmap[], int16_t w, int16_t h,
  uint16_t color, uint16_t bg) {

    int16_t byteWidth = (w + 7) / 8;
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
            else byte = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&bitmap[j * byteWidth + i / 8])); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
            writePixel(x+i, y, (byte & 0x80) ? color : bg);
        }
    }
    endWrite();
}
# 711 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
  uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) {

    int16_t byteWidth = (w + 7) / 8;
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
            else byte = bitmap[j * byteWidth + i / 8];
            if(byte & 0x80) writePixel(x+i, y, color);
        }
    }
    endWrite();
}
# 740 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
  uint8_t *bitmap, int16_t w, int16_t h, uint16_t color, uint16_t bg) {

    int16_t byteWidth = (w + 7) / 8;
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
            else byte = bitmap[j * byteWidth + i / 8];
            writePixel(x+i, y, (byte & 0x80) ? color : bg);
        }
    }
    endWrite();
}
# 772 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawXBitmap(int16_t x, int16_t y,
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {

    int16_t byteWidth = (w + 7) / 8;
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte >>= 1;
            else byte = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&bitmap[j * byteWidth + i / 8])); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));


            if(byte & 0x01) writePixel(x+i, y, color);
        }
    }
    endWrite();
}
# 803 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawGrayscaleBitmap(int16_t x, int16_t y,
  const uint8_t bitmap[], int16_t w, int16_t h) {
    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            writePixel(x+i, y, (uint8_t)(__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&bitmap[j * w + i])); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; })));
        }
    }
    endWrite();
}
# 825 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawGrayscaleBitmap(int16_t x, int16_t y,
  uint8_t *bitmap, int16_t w, int16_t h) {
    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            writePixel(x+i, y, bitmap[j * w + i]);
        }
    }
    endWrite();
}
# 851 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawGrayscaleBitmap(int16_t x, int16_t y,
  const uint8_t bitmap[], const uint8_t mask[],
  int16_t w, int16_t h) {
    int16_t bw = (w + 7) / 8;
    uint8_t byte = 0;
    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
            else byte = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&mask[j * bw + i / 8])); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
            if(byte & 0x80) {
                writePixel(x+i, y, (uint8_t)(__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&bitmap[j * w + i])); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; })));
            }
        }
    }
    endWrite();
}
# 883 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawGrayscaleBitmap(int16_t x, int16_t y,
  uint8_t *bitmap, uint8_t *mask, int16_t w, int16_t h) {
    int16_t bw = (w + 7) / 8;
    uint8_t byte = 0;
    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
            else byte = mask[j * bw + i / 8];
            if(byte & 0x80) {
                writePixel(x+i, y, bitmap[j * w + i]);
            }
        }
    }
    endWrite();
}
# 912 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawRGBBitmap(int16_t x, int16_t y,
  const uint16_t bitmap[], int16_t w, int16_t h) {
    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            writePixel(x+i, y, (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&bitmap[j * w + i])); uint16_t __result; __asm__ __volatile__ ( "lpm %A0, Z+" "\n\t" "lpm %B0, Z" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) ); __result; })));
        }
    }
    endWrite();
}
# 934 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawRGBBitmap(int16_t x, int16_t y,
  uint16_t *bitmap, int16_t w, int16_t h) {
    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            writePixel(x+i, y, bitmap[j * w + i]);
        }
    }
    endWrite();
}
# 957 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawRGBBitmap(int16_t x, int16_t y,
  const uint16_t bitmap[], const uint8_t mask[],
  int16_t w, int16_t h) {
    int16_t bw = (w + 7) / 8;
    uint8_t byte = 0;
    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
            else byte = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&mask[j * bw + i / 8])); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
            if(byte & 0x80) {
                writePixel(x+i, y, (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&bitmap[j * w + i])); uint16_t __result; __asm__ __volatile__ ( "lpm %A0, Z+" "\n\t" "lpm %B0, Z" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) ); __result; })));
            }
        }
    }
    endWrite();
}
# 986 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawRGBBitmap(int16_t x, int16_t y,
  uint16_t *bitmap, uint8_t *mask, int16_t w, int16_t h) {
    int16_t bw = (w + 7) / 8;
    uint8_t byte = 0;
    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
            else byte = mask[j * bw + i / 8];
            if(byte & 0x80) {
                writePixel(x+i, y, bitmap[j * w + i]);
            }
        }
    }
    endWrite();
}
# 1017 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {

    if(!gfxFont) {

        if((x >= _width) ||
           (y >= _height) ||
           ((x + 6 * size - 1) < 0) ||
           ((y + 8 * size - 1) < 0))
            return;

        if(!_cp437 && (c >= 176)) c++;

        startWrite();
        for(int8_t i=0; i<5; i++ ) {
            uint8_t line = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&font[c * 5 + i])); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
                } else if(bg != color) {
                    if(size == 1)
                        writePixel(x+i, y+j, bg);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
                }
            }
        }
        if(bg != color) {
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
            else writeFillRect(x+5*size, y, size, 8*size, bg);
        }
        endWrite();

    } else {





        c -= (uint8_t)(__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&gfxFont->first)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
        GFXglyph *glyph = &(((GFXglyph *)((void *)(__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&gfxFont->glyph)); uint16_t __result; __asm__ __volatile__ ( "lpm %A0, Z+" "\n\t" "lpm %B0, Z" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) ); __result; }))))[c]);
        uint8_t *bitmap = (uint8_t *)((void *)(__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&gfxFont->bitmap)); uint16_t __result; __asm__ __volatile__ ( "lpm %A0, Z+" "\n\t" "lpm %B0, Z" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) ); __result; })));

        uint16_t bo = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&glyph->bitmapOffset)); uint16_t __result; __asm__ __volatile__ ( "lpm %A0, Z+" "\n\t" "lpm %B0, Z" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) ); __result; }));
        uint8_t w = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&glyph->width)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; })),
                 h = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&glyph->height)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
        int8_t xo = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&glyph->xOffset)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; })),
                 yo = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&glyph->yOffset)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
        uint8_t xx, yy, bits = 0, bit = 0;
        int16_t xo16 = 0, yo16 = 0;

        if(size > 1) {
            xo16 = xo;
            yo16 = yo;
        }
# 1094 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
                if(!(bit++ & 7)) {
                    bits = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&bitmap[bo++])); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
                          size, size, color);
                    }
                }
                bits <<= 1;
            }
        }
        endWrite();

    }
}






size_t Adafruit_GFX::write(uint8_t c) {
    if(!gfxFont) {

        if(c == '\n') {
            cursor_x = 0;
            cursor_y += textsize * 8;
        } else if(c != '\r') {
            if(wrap && ((cursor_x + textsize * 6) > _width)) {
                cursor_x = 0;
                cursor_y += textsize * 8;
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
            cursor_x += textsize * 6;
        }

    } else {

        if(c == '\n') {
            cursor_x = 0;
            cursor_y += (int16_t)textsize *
                        (uint8_t)(__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&gfxFont->yAdvance)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
        } else if(c != '\r') {
            uint8_t first = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&gfxFont->first)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
            if((c >= first) && (c <= (uint8_t)(__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&gfxFont->last)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; })))) {
                GFXglyph *glyph = &(((GFXglyph *)((void *)(__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&gfxFont->glyph)); uint16_t __result; __asm__ __volatile__ ( "lpm %A0, Z+" "\n\t" "lpm %B0, Z" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) ); __result; })))
                                  )[c - first]);
                uint8_t w = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&glyph->width)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; })),
                          h = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&glyph->height)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
                if((w > 0) && (h > 0)) {
                    int16_t xo = (int8_t)(__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&glyph->xOffset)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
                        cursor_x = 0;
                        cursor_y += (int16_t)textsize *
                          (uint8_t)(__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&gfxFont->yAdvance)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
                }
                cursor_x += (uint8_t)(__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&glyph->xAdvance)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; })) * (int16_t)textsize;
            }
        }

    }
    return 1;
}
# 1173 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    cursor_y = y;
}







int16_t Adafruit_GFX::getCursorX(void) const {
    return cursor_x;
}







int16_t Adafruit_GFX::getCursorY(void) const {
    return cursor_y;
}







void Adafruit_GFX::setTextSize(uint8_t s) {
    textsize = (s > 0) ? s : 1;
}







void Adafruit_GFX::setTextColor(uint16_t c) {


    textcolor = textbgcolor = c;
}
# 1227 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::setTextColor(uint16_t c, uint16_t b) {
    textcolor = c;
    textbgcolor = b;
}







void Adafruit_GFX::setTextWrap(boolean w) {
    wrap = w;
}







uint8_t Adafruit_GFX::getRotation(void) const {
    return rotation;
}







void Adafruit_GFX::setRotation(uint8_t x) {
    rotation = (x & 3);
    switch(rotation) {
        case 0:
        case 2:
            _width = WIDTH;
            _height = HEIGHT;
            break;
        case 1:
        case 3:
            _width = HEIGHT;
            _height = WIDTH;
            break;
    }
}
# 1286 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::cp437(boolean x) {
    _cp437 = x;
}







void Adafruit_GFX::setFont(const GFXfont *f) {
    if(f) {
        if(!gfxFont) {


            cursor_y += 6;
        }
    } else if(gfxFont) {


        cursor_y -= 6;
    }
    gfxFont = (GFXfont *)f;
}
# 1325 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::charBounds(char c, int16_t *x, int16_t *y,
  int16_t *minx, int16_t *miny, int16_t *maxx, int16_t *maxy) {

    if(gfxFont) {

        if(c == '\n') {
            *x = 0;
            *y += textsize * (uint8_t)(__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&gfxFont->yAdvance)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
        } else if(c != '\r') {
            uint8_t first = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&gfxFont->first)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; })),
                    last = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&gfxFont->last)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
            if((c >= first) && (c <= last)) {
                GFXglyph *glyph = &(((GFXglyph *)((void *)(__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&gfxFont->glyph)); uint16_t __result; __asm__ __volatile__ ( "lpm %A0, Z+" "\n\t" "lpm %B0, Z" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) ); __result; })))
                                  )[c - first]);
                uint8_t gw = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&glyph->width)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; })),
                        gh = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&glyph->height)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; })),
                        xa = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&glyph->xAdvance)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
                int8_t xo = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&glyph->xOffset)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; })),
                        yo = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&glyph->yOffset)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
                if(wrap && ((*x+(((int16_t)xo+gw)*textsize)) > _width)) {
                    *x = 0;
                    *y += textsize * (uint8_t)(__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&gfxFont->yAdvance)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
                }
                int16_t ts = (int16_t)textsize,
                        x1 = *x + xo * ts,
                        y1 = *y + yo * ts,
                        x2 = x1 + gw * ts - 1,
                        y2 = y1 + gh * ts - 1;
                if(x1 < *minx) *minx = x1;
                if(y1 < *miny) *miny = y1;
                if(x2 > *maxx) *maxx = x2;
                if(y2 > *maxy) *maxy = y2;
                *x += xa * ts;
            }
        }

    } else {

        if(c == '\n') {
            *x = 0;
            *y += textsize * 8;

        } else if(c != '\r') {
            if(wrap && ((*x + textsize * 6) > _width)) {
                *x = 0;
                *y += textsize * 8;
            }
            int x2 = *x + textsize * 6 - 1,
                y2 = *y + textsize * 8 - 1;
            if(x2 > *maxx) *maxx = x2;
            if(y2 > *maxy) *maxy = y2;
            if(*x < *minx) *minx = *x;
            if(*y < *miny) *miny = *y;
            *x += textsize * 6;
        }
    }
}
# 1395 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::getTextBounds(char *str, int16_t x, int16_t y,
        int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h) {
    uint8_t c;

    *x1 = x;
    *y1 = y;
    *w = *h = 0;

    int16_t minx = _width, miny = _height, maxx = -1, maxy = -1;

    while((c = *str++))
        charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);

    if(maxx >= minx) {
        *x1 = minx;
        *w = maxx - minx + 1;
    }
    if(maxy >= miny) {
        *y1 = miny;
        *h = maxy - miny + 1;
    }
}
# 1430 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX::getTextBounds(const __FlashStringHelper *str,
        int16_t x, int16_t y, int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h) {
    uint8_t *s = (uint8_t *)str, c;

    *x1 = x;
    *y1 = y;
    *w = *h = 0;

    int16_t minx = _width, miny = _height, maxx = -1, maxy = -1;

    while((c = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(s++)); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))))
        charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);

    if(maxx >= minx) {
        *x1 = minx;
        *w = maxx - minx + 1;
    }
    if(maxy >= miny) {
        *y1 = miny;
        *h = maxy - miny + 1;
    }
}







int16_t Adafruit_GFX::width(void) const {
    return _width;
}







int16_t Adafruit_GFX::height(void) const {
    return _height;
}







void Adafruit_GFX::invertDisplay(boolean i) {

}
# 1490 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
Adafruit_GFX_Button::Adafruit_GFX_Button(void) {
  _gfx = 0;
}
# 1510 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX_Button::initButton(
 Adafruit_GFX *gfx, int16_t x, int16_t y, uint16_t w, uint16_t h,
 uint16_t outline, uint16_t fill, uint16_t textcolor,
 char *label, uint8_t textsize)
{

  initButtonUL(gfx, x - (w / 2), y - (h / 2), w, h, outline, fill,
    textcolor, label, textsize);
}
# 1535 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void Adafruit_GFX_Button::initButtonUL(
 Adafruit_GFX *gfx, int16_t x1, int16_t y1, uint16_t w, uint16_t h,
 uint16_t outline, uint16_t fill, uint16_t textcolor,
 char *label, uint8_t textsize)
{
  _x1 = x1;
  _y1 = y1;
  _w = w;
  _h = h;
  _outlinecolor = outline;
  _fillcolor = fill;
  _textcolor = textcolor;
  _textsize = textsize;
  _gfx = gfx;
  strncpy(_label, label, 9);
}







void Adafruit_GFX_Button::drawButton(boolean inverted) {
  uint16_t fill, outline, text;

  if(!inverted) {
    fill = _fillcolor;
    outline = _outlinecolor;
    text = _textcolor;
  } else {
    fill = _textcolor;
    outline = _outlinecolor;
    text = _fillcolor;
  }

  uint8_t r = ((_w)<(_h)?(_w):(_h)) / 4;
  _gfx->fillRoundRect(_x1, _y1, _w, _h, r, fill);
  _gfx->drawRoundRect(_x1, _y1, _w, _h, r, outline);

  _gfx->setCursor(_x1 + (_w/2) - (strlen(_label) * 3 * _textsize),
    _y1 + (_h/2) - (4 * _textsize));
  _gfx->setTextColor(text);
  _gfx->setTextSize(_textsize);
  _gfx->print(_label);
}
# 1590 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
boolean Adafruit_GFX_Button::contains(int16_t x, int16_t y) {
  return ((x >= _x1) && (x < (_x1 + _w)) &&
          (y >= _y1) && (y < (_y1 + _h)));
}







void Adafruit_GFX_Button::press(boolean p) {
  laststate = currstate;
  currstate = p;
}







boolean Adafruit_GFX_Button::isPressed() { return currstate; }







boolean Adafruit_GFX_Button::justPressed() { return (currstate && !laststate); }







boolean Adafruit_GFX_Button::justReleased() { return (!currstate && laststate); }
# 1656 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
GFXcanvas1::GFXcanvas1(uint16_t w, uint16_t h) : Adafruit_GFX(w, h) {
    uint16_t bytes = ((w + 7) / 8) * h;
    if((buffer = (uint8_t *)malloc(bytes))) {
        memset(buffer, 0, bytes);
    }
}






GFXcanvas1::~GFXcanvas1(void) {
    if(buffer) free(buffer);
}







uint8_t* GFXcanvas1::getBuffer(void) {
    return buffer;
}
# 1690 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void GFXcanvas1::drawPixel(int16_t x, int16_t y, uint16_t color) {


    static const uint8_t __attribute__((__progmem__))
        GFXsetBit[] = { 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01 },
        GFXclrBit[] = { 0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0xFE };


    if(buffer) {
        if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;

        int16_t t;
        switch(rotation) {
            case 1:
                t = x;
                x = WIDTH - 1 - y;
                y = t;
                break;
            case 2:
                x = WIDTH - 1 - x;
                y = HEIGHT - 1 - y;
                break;
            case 3:
                t = x;
                x = y;
                y = HEIGHT - 1 - t;
                break;
        }

        uint8_t *ptr = &buffer[(x / 8) + y * ((WIDTH + 7) / 8)];

        if(color) *ptr |= (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&GFXsetBit[x & 7])); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));
        else *ptr &= (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(&GFXclrBit[x & 7])); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }));




    }
}







void GFXcanvas1::fillScreen(uint16_t color) {
    if(buffer) {
        uint16_t bytes = ((WIDTH + 7) / 8) * HEIGHT;
        memset(buffer, color ? 0xFF : 0x00, bytes);
    }
}
# 1750 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
GFXcanvas8::GFXcanvas8(uint16_t w, uint16_t h) : Adafruit_GFX(w, h) {
    uint32_t bytes = w * h;
    if((buffer = (uint8_t *)malloc(bytes))) {
        memset(buffer, 0, bytes);
    }
}






GFXcanvas8::~GFXcanvas8(void) {
    if(buffer) free(buffer);
}
# 1773 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
uint8_t* GFXcanvas8::getBuffer(void) {
    return buffer;
}
# 1785 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void GFXcanvas8::drawPixel(int16_t x, int16_t y, uint16_t color) {
    if(buffer) {
        if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;

        int16_t t;
        switch(rotation) {
            case 1:
                t = x;
                x = WIDTH - 1 - y;
                y = t;
                break;
            case 2:
                x = WIDTH - 1 - x;
                y = HEIGHT - 1 - y;
                break;
            case 3:
                t = x;
                x = y;
                y = HEIGHT - 1 - t;
                break;
        }

        buffer[x + y * WIDTH] = color;
    }
}







void GFXcanvas8::fillScreen(uint16_t color) {
    if(buffer) {
        memset(buffer, color, WIDTH * HEIGHT);
    }
}

void GFXcanvas8::writeFastHLine(int16_t x, int16_t y,
  int16_t w, uint16_t color) {

    if((x >= _width) || (y < 0) || (y >= _height)) return;
    int16_t x2 = x + w - 1;
    if(x2 < 0) return;


    if(x < 0) {
        x = 0;
        w = x2 + 1;
    }
    if(x2 >= _width) w = _width - x;

    int16_t t;
    switch(rotation) {
        case 1:
            t = x;
            x = WIDTH - 1 - y;
            y = t;
            break;
        case 2:
            x = WIDTH - 1 - x;
            y = HEIGHT - 1 - y;
            break;
        case 3:
            t = x;
            x = y;
            y = HEIGHT - 1 - t;
            break;
    }

    memset(buffer + y * WIDTH + x, color, w);
}
# 1865 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
GFXcanvas16::GFXcanvas16(uint16_t w, uint16_t h) : Adafruit_GFX(w, h) {
    uint32_t bytes = w * h * 2;
    if((buffer = (uint16_t *)malloc(bytes))) {
        memset(buffer, 0, bytes);
    }
}






GFXcanvas16::~GFXcanvas16(void) {
    if(buffer) free(buffer);
}







uint16_t* GFXcanvas16::getBuffer(void) {
    return buffer;
}
# 1899 "../lib/Adafruit_GFX/Adafruit_GFX.cpp"
void GFXcanvas16::drawPixel(int16_t x, int16_t y, uint16_t color) {
    if(buffer) {
        if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;

        int16_t t;
        switch(rotation) {
            case 1:
                t = x;
                x = WIDTH - 1 - y;
                y = t;
                break;
            case 2:
                x = WIDTH - 1 - x;
                y = HEIGHT - 1 - y;
                break;
            case 3:
                t = x;
                x = y;
                y = HEIGHT - 1 - t;
                break;
        }

        buffer[x + y * WIDTH] = color;
    }
}







void GFXcanvas16::fillScreen(uint16_t color) {
    if(buffer) {
        uint8_t hi = color >> 8, lo = color & 0xFF;
        if(hi == lo) {
            memset(buffer, lo, WIDTH * HEIGHT * 2);
        } else {
            uint32_t i, pixels = WIDTH * HEIGHT;
            for(i=0; i<pixels; i++) buffer[i] = color;
        }
    }
}
